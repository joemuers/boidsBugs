#
# PySwarm, a swarming simulation tool for Autodesk Maya
#
# created 2013-2014
#
# @author: Joe Muers  (joemuers@hotmail.com)
# 
# All rights reserved.
#
# ------------------------------------------------------------


import pyswarm.ui.uiBuilder as uib
import pyswarm.vectors.vector3 as v3
import pyswarm.utils.general as util
import pyswarm.utils.sceneInterface as scene
import pyswarm.utils.fileLocations as fl
import pyswarm.utils.colours as colour

import pyswarm.attributes.attributeGroupObject as ago
import pyswarm.attributes.attributeTypes as at



_PREFERENCES_WINDOW_LEFT_COLUMN_WIDTH_ = 160
_TOP_PANEL_LEFT_COLUMN_WIDTH_ = 150



#######################################
class _PreferencesWindow(object):
    
    _invalid_, _autoGenerated_, _userDefined_ = range(3)
    _invalid_, _withMayaScene_, _manual_ = range(3)
    
######################
    def __init__(self, accelerationAttribute, listRebuildAttribute, onPreferencesUpdatedMethod, sceneSaveMethod,
                 quickSetupEnableSelfCollide, quickSetupDisableFriction,
                 quickSetupEnableGravity, quickSetupChangeRenderType,
                 quickSetupEnableGroundPlane, quickSetupChangeSpaceScale,
                 quickSetupTranslateAbovePlane):
        
        self._attributesToParentLookup = []
        
        self._accelerationDueToGravity = at.FloatAttribute(accelerationAttribute.attributeLabel, 
                                                           accelerationAttribute.value, 
                                                           minimumValue=accelerationAttribute.minimumValue, 
                                                           maximumValue=accelerationAttribute.maximumValue)
        self._listRebuildFrequency = at.IntAttribute(listRebuildAttribute.attributeLabel, 
                                                     listRebuildAttribute.value)

        self._pairAttributeWithParentAttribute(self._accelerationDueToGravity, accelerationAttribute)
        self._pairAttributeWithParentAttribute(self._listRebuildFrequency, listRebuildAttribute)
        
        self._onPreferencesUpdatedMethod = onPreferencesUpdatedMethod
        self._sceneSaveMethod = sceneSaveMethod
        
        self._saveLocation = at.StringAttribute("Save Location:", fl.SaveFileLocation())
        self._userSavePath = ""
        self._saveModeOption = (_PreferencesWindow._userDefined_ 
                                if(fl.HaveUserProvidedSavePath()) else _PreferencesWindow._autoGenerated_) 
        if(self._saveModeIsAutoGenerated):
            self._saveLocation.setEnabled(False)
        
        self._saveFrequencyRadioButtons = None
        self._saveLocationTextField = None
        self._saveLocationRadioButtons = None
        self._debugLoggingCheckBox = None
        
        self._progressUpdatesEnabled = True
        self._progressUpdatesEnabledCheckbox = None
        
        self._quickSetupEnableSelfCollide = at.BoolAttribute(quickSetupEnableSelfCollide.attributeLabel, quickSetupEnableSelfCollide.value)
        self._quickSetupDisableFriction = at.BoolAttribute(quickSetupDisableFriction.attributeLabel, quickSetupDisableFriction.value)
        self._quickSetupEnableGravity = at.BoolAttribute(quickSetupEnableGravity.attributeLabel, quickSetupEnableGravity.value)
        self._quickSetupChangeRenderType = at.BoolAttribute(quickSetupChangeRenderType.attributeLabel, quickSetupChangeRenderType.value)
        self._quickSetupEnableGroundPlane = at.BoolAttribute(quickSetupEnableGroundPlane.attributeLabel, quickSetupEnableGroundPlane.value)
        self._quickSetupChangeSpaceScale = at.BoolAttribute(quickSetupChangeSpaceScale.attributeLabel, quickSetupChangeSpaceScale.value)
        self._quickSetupTranslateAbovePlane = at.BoolAttribute(quickSetupTranslateAbovePlane.attributeLabel, quickSetupTranslateAbovePlane.value)
        
        self._pairAttributeWithParentAttribute(self._quickSetupEnableSelfCollide, quickSetupEnableSelfCollide)
        self._pairAttributeWithParentAttribute(self._quickSetupDisableFriction, quickSetupDisableFriction)
        self._pairAttributeWithParentAttribute(self._quickSetupEnableGravity, quickSetupEnableGravity)
        self._pairAttributeWithParentAttribute(self._quickSetupChangeRenderType, quickSetupChangeRenderType)
        self._pairAttributeWithParentAttribute(self._quickSetupEnableGroundPlane, quickSetupEnableGroundPlane)
        self._pairAttributeWithParentAttribute(self._quickSetupChangeSpaceScale, quickSetupChangeSpaceScale)
        self._pairAttributeWithParentAttribute(self._quickSetupTranslateAbovePlane, quickSetupTranslateAbovePlane)
        
        self._window = None

########
    def __del__(self):
        self._closeWindow()
        
#####################
    def _getSaveModeIsAutoGenerated(self):
        return self._saveModeOption == _PreferencesWindow._autoGenerated_
    _saveModeIsAutoGenerated = property(_getSaveModeIsAutoGenerated)
    
#####################
    def _pairAttributeWithParentAttribute(self, attribute, parentAttribute):
        self._attributesToParentLookup.append((attribute, parentAttribute))
        attribute.annotation = parentAttribute.annotation
        attribute.logValueChanges = False
        
########
    def _pullValuesFromParentAttributes(self):
        for attribute, parentAttribute in self._attributesToParentLookup:
            attribute.value = parentAttribute.value
            
########
    def _pushValuesToParentAttributes(self):
        for attribute, parentAttribute in self._attributesToParentLookup:
            parentAttribute.value = attribute.value

#####################       
    def show(self):
        if(not uib.WindowIsVisible(self._window)):
            self._pullValuesFromParentAttributes()
                
            self._window = uib.MakeWindow("Global Preferences")
            formLayout = uib.MakeFormLayout()
            
            borderLayout = uib.MakeBorderingLayout()
            columnLayout = uib.MakeColumnLayout()
            
            self._debugLoggingCheckBox = uib.MakeCheckboxStandalone("Debug Logging", util.LogLevelIsDebug(), 
                                                                    leftColumnWidth=_PREFERENCES_WINDOW_LEFT_COLUMN_WIDTH_,
                                                                    annotation="Shows/hides verbose debug logging in the Script Editor")[1]
                                                                    
            self._progressUpdatesEnabledCheckbox = uib.MakeCheckboxStandalone("Progress Bar Enabled", self._progressUpdatesEnabled, 
                                                                              leftColumnWidth=_PREFERENCES_WINDOW_LEFT_COLUMN_WIDTH_,
                                                                              annotation="Enables/disables updates in the progress bar in the main window\n"
                                                                              "(disabling can boost performance if you have a small number of agents).")[1]
            
            uib.MakeFieldGroup(self._accelerationDueToGravity, leftColumnWidth=_PREFERENCES_WINDOW_LEFT_COLUMN_WIDTH_)
            uib.MakeFieldGroup(self._listRebuildFrequency, leftColumnWidth=_PREFERENCES_WINDOW_LEFT_COLUMN_WIDTH_)
            
            self._saveFrequencyRadioButtons = uib.MakeRadioButtonGroup("Save Frequency:",
                                                                       ("Maya Scene", "Manual"),
                                                                       None,
                                                                       vertical=True,
                                                                       leftColumnWidth=_PREFERENCES_WINDOW_LEFT_COLUMN_WIDTH_,
                                                                       annotation="Determines how the PySwarm session is saved:\n"
                                                                       "Maya Scene = will be saved automatically whenever your Maya scene is saved.\n"
                                                                       "Manual = will only save when you do it yourself via the File menu.")
            saveFrequencyOption = (_PreferencesWindow._withMayaScene_ 
                                   if(util.SceneSavedScriptJobExists()) else _PreferencesWindow._manual_)
            self._saveFrequencyRadioButtons.setSelect(saveFrequencyOption)
            
            saveLocationAnnotation = ("Determines the name/location of the PySwarm save file:\n"
                                      "Auto = will be saved in the \"scripts\" folder in your project database, using the\n"
                                      "       same name as your Maya scene file.\n"
                                      "User defined = will always use the specified path (overwrites any previous save files).")
            self._saveLocationTextField = uib.MakePassiveTextField(self._saveLocation, 
                                                                   self._filePickerButtonWasPressed,
                                                                   isEditable=True,
                                                                   leftColumnWidth=_PREFERENCES_WINDOW_LEFT_COLUMN_WIDTH_,
                                                                   annotation=saveLocationAnnotation)
            self._saveLocationRadioButtons = uib.MakeRadioButtonGroup("", 
                                                                      ("Auto", "User defined"), 
                                                                      self._onRadioButtonChange,
                                                                      vertical=False,
                                                                      leftColumnWidth=_PREFERENCES_WINDOW_LEFT_COLUMN_WIDTH_,
                                                                      annotation=saveLocationAnnotation)
            self._saveModeOption = (_PreferencesWindow._userDefined_ 
                                    if(fl.HaveUserProvidedSavePath()) else _PreferencesWindow._autoGenerated_) 
            self._saveLocationRadioButtons.setSelect(self._saveModeOption)
            
            uib.MakeCheckboxGroup(self._quickSetupEnableSelfCollide, "Quick Setup", leftColumnWidth=_PREFERENCES_WINDOW_LEFT_COLUMN_WIDTH_, switchLabels=True)
            uib.MakeCheckboxGroup(self._quickSetupDisableFriction, leftColumnWidth=_PREFERENCES_WINDOW_LEFT_COLUMN_WIDTH_)
            uib.MakeCheckboxGroup(self._quickSetupEnableGravity, leftColumnWidth=_PREFERENCES_WINDOW_LEFT_COLUMN_WIDTH_)
            uib.MakeCheckboxGroup(self._quickSetupChangeRenderType, leftColumnWidth=_PREFERENCES_WINDOW_LEFT_COLUMN_WIDTH_)
            uib.MakeCheckboxGroup(self._quickSetupEnableGroundPlane, leftColumnWidth=_PREFERENCES_WINDOW_LEFT_COLUMN_WIDTH_)
            uib.MakeCheckboxGroup(self._quickSetupChangeSpaceScale, leftColumnWidth=_PREFERENCES_WINDOW_LEFT_COLUMN_WIDTH_)
            uib.MakeCheckboxGroup(self._quickSetupTranslateAbovePlane, leftColumnWidth=_PREFERENCES_WINDOW_LEFT_COLUMN_WIDTH_)
            
            uib.SetAsChildLayout(columnLayout, borderLayout)
            
            buttonStripLayout = uib.MakeButtonStrip((("OK", self._okButtonWasPressed), ("Cancel", self._closeWindow)))[0]
            uib.SetAsChildLayout(buttonStripLayout)
            
            uib.DistributeButtonedWindowInFormLayout(formLayout, borderLayout, buttonStripLayout)
            
        self._window.show()
 
#####################        
    def _onRadioButtonChange(self, *args):
        if(self._saveModeOption != self._saveLocationRadioButtons.getSelect()):
            self._saveModeOption = self._saveLocationRadioButtons.getSelect()
            
            if(self._saveModeIsAutoGenerated):
                self._saveLocation.setEnabled(False)
                self._saveLocation.value = fl._AutoGeneratedSavePath()
            else:
                self._saveLocation.setEnabled(True)
                self._saveLocation.value = self._userSavePath

#####################            
    def _filePickerButtonWasPressed(self, *args):
        if(self._saveModeOption == _PreferencesWindow._autoGenerated_):
            raise RuntimeError("Logic error - allowed file selection when auto-generated save mode is selected.")
        else:
            self._userSavePath = uib.GetFilePathFromUser(False, fl.SaveFolderLocation(), '*')
            if(self._userSavePath is not None and self._userSavePath):
                self._saveLocation.value = self._userSavePath

#####################        
    def _okButtonWasPressed(self, *args):
        self._pushValuesToParentAttributes()
        
        saveFrequenceOption = self._saveFrequencyRadioButtons.getSelect()
        if(saveFrequenceOption == _PreferencesWindow._withMayaScene_ and not util.SceneSavedScriptJobExists()):
            util.AddSceneSavedScriptJobIfNecessary(self._sceneSaveMethod)
        elif(saveFrequenceOption == _PreferencesWindow._manual_ and util.SceneSavedScriptJobExists()):
            util.RemoveSceneSavedScriptJob()
        
        if(self._saveModeIsAutoGenerated):
            fl.SetSaveLocation(None)
        else:
            fl.SetSaveLocation(self._saveLocation.value)
            
        self._progressUpdatesEnabled = self._progressUpdatesEnabledCheckbox.getValue()
        
        if(self._debugLoggingCheckBox.getValue()):
            util.SetLoggingLevelDebug()
        else:
            util.SetLoggingLevelInfo()
        
        self._onPreferencesUpdatedMethod()
        
        self._closeWindow()

#####################        
    def _closeWindow(self, *args):
        util.EvalDeferred(uib.DestroyWindowIfNecessary, self._window)

        self._window = None
        self._saveFrequencyRadioButtons = None
        self._saveLocationTextField = None
        self._saveLocationRadioButtons = None
        self._debugLoggingCheckBox = None
        self._progressUpdatesEnabledCheckbox = None

# END OF CLASS - _PreferencesWindow
#################################### 



#======================================================================================



#######################################
class GlobalAttributeGroup(ago.AttributeGroupObject):

    @classmethod
    def BehaviourTypeName(cls):
        return "Global Attributes"
    
#####################    
    def __init__(self, particleShapeNode, sceneSaveMethod, boundingLocators=None):
        super(GlobalAttributeGroup, self).__init__(GlobalAttributeGroup.BehaviourTypeName())
        
        self._particleShapeNode = scene.PymelObjectFromObjectName(particleShapeNode)
        self.nameChangeCallback = None
        
        self._enabled = at.BoolAttribute("Enabled", True)
        boundsLocator1, boundsLocator2 = util.InitVal(boundingLocators, (None, None))
        self._sceneBounds1 = at.LocationAttribute("Scene Bounds 1", util.InitVal(boundsLocator1, (-20, -20, -20)), self)
        self._sceneBounds2 = at.LocationAttribute("Scene Bounds 2", util.InitVal(boundsLocator2, (20, 20, 20)), self)
        self._sceneBounds1.excludeFromDefaults = True
        self._sceneBounds2.excludeFromDefaults = True
        self._lowerBounds = v3.Vector3()
        self._upperBounds = v3.Vector3()
        
        self._defaultBehaviourId = at.StringAttribute("Default Behaviour Id", "<None>")
        self._defaultBehaviourId.excludeFromDefaults = True
        
        self._statusLabel = None
        self._progressBar = None
        self._statusNeedsReset = True
        
        self._accelerationDueToGravity = at.FloatAttribute("Acceleration Due To Gravity:", -38.0, 
                                                           minimumValue=float("-inf"), maximumValue=0)
        self._listRebuildFrequency = at.IntAttribute("List Rebuild Frequency:", 5)
        self._useDebugColours = at.BoolAttribute("Debug Colour Particles", True)
        
        self._quickSetupEnableSelfCollide = at.BoolAttribute("Enable Self Collide", True, annotation=self._getQuickSetupEnableSelfCollide.__doc__)
        self._quickSetupDisableFriction = at.BoolAttribute("Disable Friction", True, annotation=self._getQuickSetupDisableFriction.__doc__)
        self._quickSetupDisableIgnoreGravity = at.BoolAttribute("Disable Ignore Gravity", True, annotation=self._getQuickSetupDisableIgnoreGravity.__doc__)
        self._quickSetupChangeRenderType = at.BoolAttribute("Change Render Type", True, annotation=self._getQuickSetupChangeRenderType.__doc__)
        self._quickSetupEnableGroundPlane = at.BoolAttribute("Enable Ground Plane", True, annotation=self._getQuickSetupEnableGroundPlane.__doc__)
        self._quickSetupChangeSpaceScale = at.BoolAttribute("Change Space Scale", True, annotation=self._getQuickSetupChangeSpaceScale.__doc__)
        self._quickSetupTranslateAbovePlane = at.BoolAttribute("Translate Above Plane", True, annotation=self._getQuickSetupTranslateAbovePlane.__doc__)
        
        self._accelerationDueToGravity.annotation = self._getAccelerationDueToGravity.__doc__
        self._listRebuildFrequency.annotation = self._getListRebuildFrequency.__doc__
        
        self._preferencesWindow = _PreferencesWindow(self._accelerationDueToGravity, self._listRebuildFrequency, 
                                                     self._onPreferencesUpdated, sceneSaveMethod,
                                                     self._quickSetupEnableSelfCollide, self._quickSetupDisableFriction,
                                                     self._quickSetupDisableIgnoreGravity, self._quickSetupChangeRenderType,
                                                     self._quickSetupEnableGroundPlane, self._quickSetupChangeSpaceScale,
                                                     self._quickSetupTranslateAbovePlane)
        
        self._updateBoundsVectors()
        
########
    def __del__(self):
        try:
            self._preferencesWindow._closeWindow()
        except:
            pass
        
#####################
    def __getstate__(self):
        state = super(GlobalAttributeGroup, self).__getstate__()
        state["nameChangeCallback"] = None
        state["_statusLabel"] = None
        state["_progressBar"] = None
        state["_preferencesWindow"] = None
        state["saveMethod"] = self._preferencesWindow._sceneSaveMethod
        state["statusEnabled"] = self._progressUpdatesEnabled
        
        return state
 
########   
    def __setstate__(self, state):
        super(GlobalAttributeGroup, self).__setstate__(state)
        
        sceneSaveMethod = state["saveMethod"]
        self._preferencesWindow = _PreferencesWindow(self._accelerationDueToGravity, self._listRebuildFrequency, 
                                                     self._onPreferencesUpdated, sceneSaveMethod,
                                                     self._quickSetupEnableSelfCollide, self._quickSetupDisableFriction,
                                                     self._quickSetupDisableIgnoreGravity, self._quickSetupChangeRenderType,
                                                     self._quickSetupEnableGroundPlane, self._quickSetupChangeSpaceScale,
                                                     self._quickSetupTranslateAbovePlane)
        if(not state["statusEnabled"]):
            self.setStatusUpdatesEnabled(False, forceUpdate=True)
    
#####################
    def _getParticleShapeNode(self):
        return self._particleShapeNode
    particleShapeNode = property(_getParticleShapeNode)
    
#####################
    def _getDefaultBehaviourId(self):
        return self._defaultBehaviourId.value
    defaultBehaviourId = property(_getDefaultBehaviourId)
    
########
    def setDefaultBehaviourAttributeGroup(self, defaultAttributeGroup):
        self._defaultBehaviourId.value = defaultAttributeGroup.behaviourId
    
#####################
    def _getProgressUpdatesEnabled(self):
        return self._preferencesWindow._progressUpdatesEnabled
    def _setProgressUpdatesEnabled(self, value):
        self._preferencesWindow._progressUpdatesEnabled = value
    _progressUpdatesEnabled = property(_getProgressUpdatesEnabled, _setProgressUpdatesEnabled)
    
#####################        
    def _createDataBlobForAgent(self, agent):
        # Not needed for global attributes
        pass
    
########
    def _updateDataBlobWithAttribute(self, dataBlob, attribute):
        # Not needed for global attributes
        pass

######################
    def _onPreferencesUpdated(self):
        self.setStatusUpdatesEnabled(self._progressUpdatesEnabled, True)
        
########
    def setStatusUpdatesEnabled(self, enabled, forceUpdate=False):
        if(enabled and (not self._progressUpdatesEnabled or forceUpdate)):
            self._progressUpdatesEnabled = True
            self.setStatusReadoutIdle()
        elif(not enabled and (self._progressUpdatesEnabled or forceUpdate)):
            self._progressBar.setEnable(False)
            self._progressBar.setProgress(0)
            self._statusLabel.setBackgroundColor(colour.StatusTextfieldBackground_Default)
            self._statusLabel.setText("N/A")
            self._statusNeedsReset = True
            self._progressUpdatesEnabled = False

######################
    def setStatusReadoutIdle(self):
        if(self._progressUpdatesEnabled):
            if(self._statusNeedsReset):
                self._progressBar.setEnable(False)
                self._statusLabel.setBackgroundColor(colour.StatusTextfieldBackground_Default)
            else:
                self._statusNeedsReset = True
                
            self._statusLabel.setText("Idle")
            self._progressBar.setProgress(0)
        
########
    def setStatusReadoutWorking(self, progressPercentage, statusReadout="Working..."):
        if(self._progressUpdatesEnabled):
            if(self._statusNeedsReset):
                self._progressBar.setEnable(True)
                self._statusLabel.setBackgroundColor(colour.StatusTextfieldBackground_Default)
                self._statusNeedsReset = False
                
            self._progressBar.setEnable(True)
            self._statusLabel.setText(statusReadout)
            self._progressBar.setProgress(progressPercentage)

########        
    def setStatusReadoutError(self):
        self._statusLabel.setBackgroundColor(colour.StatusTextfieldBackground_Error)
        self._statusLabel.setText("Error!")
        self._statusNeedsReset = True
        
#####################    
    def onFrameUpdated(self):
        self._sceneBounds1.verifyLocatorIfNecessary()
        self._sceneBounds2.verifyLocatorIfNecessary()

#####################    
    def populateUiLayout(self):
        borderLayoutTop = uib.MakeBorderingLayout()
        columnLayoutTop = uib.MakeColumnLayout()
        uib.MakeNodeNameField("nParticle Node:", self.particleShapeNode, self._onParticleNameChange, 
                              leftColumnWidth=_TOP_PANEL_LEFT_COLUMN_WIDTH_)
        
        borderLayoutMid = uib.MakeBorderingLayout()
        columnLayoutBottom = uib.MakeColumnLayout()
        uib.MakeCheckboxGroup(self._enabled, leftColumnWidth=_TOP_PANEL_LEFT_COLUMN_WIDTH_, annotation=self._getEnabled.__doc__) 
        uib.MakeLocationField(self._sceneBounds1, leftColumnWidth=_TOP_PANEL_LEFT_COLUMN_WIDTH_, annotation=self._getSceneBounds1.__doc__)
        uib.MakeLocationField(self._sceneBounds2, leftColumnWidth=_TOP_PANEL_LEFT_COLUMN_WIDTH_, annotation=self._getSceneBounds2.__doc__)
        uib.MakeCheckboxGroup(self._useDebugColours, "Enable", leftColumnWidth=_TOP_PANEL_LEFT_COLUMN_WIDTH_, annotation=self._getUseDebugColours.__doc__)
        uib.SetAsChildLayout(columnLayoutBottom, borderLayoutMid)
        
        borderLayoutBottom = uib.MakeBorderingLayout()
        columnLayoutBottom = uib.MakeColumnLayout()
        progressRowTuple = uib.MakeProgressBar("Idle...", leftColumnWidth=_TOP_PANEL_LEFT_COLUMN_WIDTH_,
                                               middleColumnWidth=165, rightColumnWidth=62)
        self._statusLabel, self._progressBar = progressRowTuple[1], progressRowTuple[2]
        self._statusNeedsReset = True
        if(self._progressUpdatesEnabled):
            self.setStatusReadoutIdle()
        else:
            self.setStatusUpdatesEnabled(False, forceUpdate=True)
        
        uib.SetAsChildLayout(columnLayoutBottom, borderLayoutBottom, columnLayoutTop, borderLayoutTop)
        
#####################        
    def showGlobalPreferencesWindow(self):
        self._preferencesWindow.show()

#####################  
    def _getEnabled(self):
        """If this PySwarm instance is disabled, all automatic reading from and updating of the Maya scene will be switched off."""
        
        return self._enabled.value
    def _setEnabled(self, value):
        self._enabled = value
    enabled = property(_getEnabled, _setEnabled)  
    
#####################
    def _getLowerBounds(self):
        """Vector3 giving the lower corner of the PySwarm scene bounding box.  Derived from sceneBounds1 & 2."""
        
        return self._lowerBounds
    lowerBounds = property(_getLowerBounds)

########    
    def _getUpperBounds(self):
        """Vector3 giving the upper corner of the PySwarm scene bounding box.  Derived from sceneBounds1 & 2."""
        
        return self._upperBounds
    upperBounds = property(_getUpperBounds)
    
########
    def _getSceneBounds1(self):
        """Vector3 giving one of the user-specified corners of the PySwarm scene bounding box."""
        
        return self._sceneBounds1.value
    def _setSceneBounds1(self, value):
        self._sceneBounds1.value = value
    sceneBounds1 = property(_getSceneBounds1, _setSceneBounds1)
    
########
    def _getSceneBounds2(self):
        """Vector3 giving one of the user-specified corners of the PySwarm scene bounding box."""
        
        return self._sceneBounds2.value
    def _setSceneBounds2(self, value):
        self._sceneBounds2.value = value
    sceneBounds2 = property(_getSceneBounds2, _setSceneBounds2)

#####################     
    def _getAccelerationDueToGravity(self):
        """Rate of acceleration, per frame, due to gravity on PySwqrm agents in the scene.  This does *not* control anything,
        but is used for calibration and should reflect the corresponding setup in the Maya scene."""
         
        return self._accelerationDueToGravity.value
    accelerationDueToGravity = property(_getAccelerationDueToGravity)

#####################     
    def _getListRebuildFrequency(self):
        """Number of frames between each recalculation of which agents are nearby, in close proximity etc.
        A lower value (higher frequency) will cause faster "reaction" times in agents, but will also increase the
        amount of CPU calculation required."""
        
        return self._listRebuildFrequency.value
    listRebuildFrequency = property(_getListRebuildFrequency)

#####################     
    def _getUseDebugColours(self):
        """If enabled, particles will be coloured according to status and behaviour."""
        
        return self._useDebugColours.value
    useDebugColours = property(_getUseDebugColours)  

#####################
    def _getQuickSetupEnableSelfCollide(self):
        """If enabled, pressing "Quick Setup" will enable self collisions on the corresponding nParticles."""
        
        return self._quickSetupEnableSelfCollide.value
    quickSetupEnableSelfCollide = property(_getQuickSetupEnableSelfCollide)
    
########
    def _getQuickSetupDisableFriction(self):
        """If enabled, pressing "Quick Setup" will disable friction on the corresponding nParticles and nParticle ground plane."""
        
        return self._quickSetupDisableFriction.value
    quickSetupDisableFriction = property(_getQuickSetupDisableFriction)    
    
########
    def _getQuickSetupDisableIgnoreGravity(self):
        """If enabled, pressing "Quick Setup" will disable the "ignore gravity" attribute on the corresponding nParticles."""
       
        return self._quickSetupDisableIgnoreGravity.value
    quickSetupDisableIgnoreGravity = property(_getQuickSetupDisableIgnoreGravity)
    
########
    def _getQuickSetupChangeRenderType(self):
        """If enabled, pressing "Quick Setup" will change the render type of the corresponding nParticles to spheres."""
       
        return self._quickSetupChangeRenderType.value
    quickSetupChangeRenderType = property(_getQuickSetupChangeRenderType)
    
########
    def _getQuickSetupEnableGroundPlane(self):
        """If enabled, pressing "Quick Setup" will enable the ground plane of the corresponding nParticle instance."""
      
        return self._quickSetupEnableGroundPlane.value
    quickSetupEnableGroundPlane = property(_getQuickSetupEnableGroundPlane)
    
########
    def _getQuickSetupChangeSpaceScale(self):
        """If enabled, pressing "Quick Setup" will change the space scale attribute of the
        corresponding nParticle instance to 0.01."""
        
        return self._quickSetupChangeSpaceScale.value
    quickSetupChangeSpaceScale = property(_getQuickSetupChangeSpaceScale)
    
########
    def _getQuickSetupTranslateAbovePlane(self):
        """If enabled, pressing "Quick Setup" will move all the nParticles upwards, such that 
        the lowest particle sits above the ground plane."""
        
        return self._quickSetupTranslateAbovePlane.value
    quickSetupTranslateAbovePlane = property(_getQuickSetupTranslateAbovePlane)
    
#####################
    def onValueChanged(self, changedAttribute):
        super(GlobalAttributeGroup, self).onValueChanged(changedAttribute)
        
        if(changedAttribute is self._sceneBounds1 or changedAttribute is self._sceneBounds2):
            self._updateBoundsVectors()

#####################            
    def _onParticleNameChange(self, *args):
        if(self.nameChangeCallback is not None):
            self.nameChangeCallback(self.particleShapeNode.name())

#####################   
    def _updateBoundsVectors(self):
        value1 = self._sceneBounds1.value
        value2 = self._sceneBounds2.value
        
        if(value1.x <= value2.x):
            self._lowerBounds.x = value1.x
            self._upperBounds.x = value2.x
        else:
            self._lowerBounds.x = value2.x
            self._upperBounds.x = value1.x
        if(value1.y <= value2.y):
            self._lowerBounds.y = value1.y
            self._upperBounds.y = value2.y
        else:
            self._lowerBounds.y = value2.y
            self._upperBounds.y = value1.y
        if(value1.z <= value2.z):
            self._lowerBounds.z = value1.z
            self._upperBounds.z = value2.z
        else:
            self._lowerBounds.z = value2.z
            self._upperBounds.z = value1.z

# END OF CLASS
####################################    
